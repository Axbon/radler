import { GenericError } from 'core/types';
import { PG_INSUFFICIENT_PERMISISONS } from 'database/pgErrors';
import {
  onRequestHookHandler,
  FastifyError,
  FastifyRequest,
  FastifyReply,
} from 'fastify';

export const handleErrors: onRequestHookHandler = async (req, reply, done) => {
  req.error = ({ message, err }) => {
    const error = err as GenericError;
    req.log.error(`${message} ::: ${error?.message} :: ${error?.stack}`);
    reply.status(400).send({ result: null, errors: [message] });
    return reply;
  };
};

export const handleExceptions = (
  error: FastifyError,
  req: FastifyRequest,
  reply: FastifyReply
) => {
  const { validation, publicMessage, code } = error;

  // Log error
  req.log.error(error);

  if (error.code === PG_INSUFFICIENT_PERMISISONS) {
    return reply
      .status(400)
      .send({ errors: 'Insufficient database privileges' });
  }

  if (validation) {
    return reply
      .status(400)
      .send({ errors: validation.map((v) => ({ message: v.message })) });
  }

  if (publicMessage) {
    //Only return messages that are safe for client viewing (Log rest). Generated by throwing explicitly.
    return reply
      .status(400)
      .send({ errors: [{ message: publicMessage, code }] });
  }

  // Send error response
  reply.status(500).send({ errors: [{ message: 'Unknown error' }] });
};
